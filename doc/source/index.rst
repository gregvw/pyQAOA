.. qaoa documentation master file, created by
   sphinx-quickstart on Mon Dec 14 00:04:27 2020.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

pyQAOA - A Package for Simulation and Optimization with Quantum Circuits
========================================================================

This package provides a framework for evaluating the expectations of 
Hermitian operators with states prepared by a controlled quantum circuit that is
efficiently simulated on a classical computer.

To illustrate the concept, let :math:`\mathcal{H}` denote a Hermitian operator for which we would like to estimate a minimum (or maximum) eigenvalue and :math:`|\psi\rangle` be a quantum state that satisfies the normalization condition 
:math:`\braket{\psi}{\psi}=1`. The minimum eigenvalue of :math:`\mathcal{H}` 
is then

.. math:: E_{\text{min}} = \min_{\psi} \braCket{\psi}{\mathcal{H}}{\psi} 

How does one generate a :math:`|\psi\rangle` with which to evaluate the expectation?
One approach uses a quantum circuit with a chain of controlled stages perform sequential modifications to an initial state. Suppose we have a circuit with :math:`m` stages where, each of which applies a control-parameterized unitary operator 
:math:`\mathcal{U}(\theta)` to the state :math:`|\psi\rangle`

.. math:: \psik{k+1} = \Uo{k} \psik{k}

with :math:`|\psi_0\rangle` being an initial state provided as input to the 
circuit. We can now formulate an optimization problem in terms of the control variables :math:`\boldsymbol{\theta} = (\theta_1,...,\theta_m)` by introducing an objective function

.. math:: f(\boldsymbol{\theta}) = \langle \psi_0 | \mathcal{U}^\dagger(\boldsymbol{\theta})\mathcal{H}\mathcal{U}(\boldsymbol{\theta})|\psi_0\rangle 
   :label: objective_function

where :math:`\mathcal{U}(\boldsymbol{\theta})=\mathcal{U}_m(\theta_m)\cdots\mathcal{U}_1(\theta_1)` and each unitary operator is a complex exponential mapping generated by a Hermitian operator

.. math:: \mathcal{U}_k(\theta_k) = \exp(i\theta_k\mathcal{A}_k)

This package is focused on numerically efficient evaluation of :eq:`objective_function` as well as its analytical gradient and Hessian with respect to the control angles.

.. toctree::
   :maxdepth: 1
   :caption: Package Contents

   circuit
   operators

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
